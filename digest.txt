Directory structure:
└── format_anki_notes/
    ├── __init__.py
    ├── meta.json
    ├── pyproject.toml
    ├── requirements.txt
    ├── format_anki_notes/
    │   ├── __init__.py
    │   ├── format_anki_notes.py
    │   ├── logger.py
    │   ├── main.py
    │   ├── __pycache__/
    │   └── rules/
    │       ├── __init__.py
    │       ├── html.py
    │       ├── multiple_spaces.py
    │       ├── nbsps.py
    │       ├── numbers.py
    │       ├── units.py
    │       └── __pycache__/
    └── tests/
        ├── __init__.py
        ├── test_main.py
        ├── test_multiple_spaces.py
        ├── test_nbsps.py
        ├── test_numbers.py
        ├── test_units.py
        └── __pycache__/

================================================
File: __init__.py
================================================
# __init__.py (racine)
from aqt import mw
from anki.hooks import addHook

def load_addon():
    try:
        from .format_anki_notes import format_anki_notes  # Importe le module
        format_anki_notes.initialize_addon()  # Appelle la fonction
    except Exception as e:
        print(f"[FormatAnkiNotes] Erreur lors du chargement de l'add-on : {e}")

# Charge l'add-on après le chargement du profil
addHook("profileLoaded", load_addon)


================================================
File: meta.json
================================================
{
  "name": "Format Anki Notes",
  "author": "Dhrions",
  "description": "Formate automatiquement les notes Anki selon les règles typographiques françaises (espaces insécables, unités, etc.).",
  "version": "0.1.0",
  "min_point_version": 0,
  "max_point_version": null,
  "homepage": "https://github.com/dhrions/format_anki_notes",
  "conflicts": []
}


================================================
File: pyproject.toml
================================================
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "format_anki_notes"
version = "0.1.0"


================================================
File: requirements.txt
================================================
-e git+ssh://git@gitea.dhrions.duckdns.org:222/dhrions/anki.git@e44bb4554f8a8803067e68e9497605bd25df1c79#egg=format_anki_notes&subdirectory=scripts/format_anki_notes
iniconfig==2.1.0
packaging==25.0
pluggy==1.6.0
Pygments==2.19.2
pytest==8.4.1


================================================
File: format_anki_notes/__init__.py
================================================
# format_anki_notes/__init__.py
from aqt import mw, gui_hooks
from .logger import get_logger

def initialize_all():
    try:
        mw.format_anki_notes_logger = get_logger()
        mw.format_anki_notes_logger.info("Logger initialisé avec succès.")

        from .format_anki_notes import initialize_addon
        initialize_addon()
    except Exception as e:
        print(f"[FormatAnkiNotes] Erreur lors de l'initialisation : {e}")

# Initialise après le chargement du profil
gui_hooks.profile_did_open.append(initialize_all)


================================================
File: format_anki_notes/format_anki_notes.py
================================================
# format_anki_notes/format_anki_notes.py
from aqt import mw, gui_hooks
from aqt.utils import showInfo
from aqt.qt import QAction, QMessageBox
from aqt.editor import Editor
from .main import format_text
from .logger import get_logger

def format_current_note(editor: Editor) -> None:
    """Formate la note actuelle avec les règles typographiques françaises."""
    try:
        note = editor.note
        modified = False
        for field_name in note.keys():
            if field_name in note:
                original_text = note[field_name]
                formatted_text = format_text(original_text)
                if not isinstance(formatted_text, str):
                    formatted_text = original_text
                if formatted_text != original_text:
                    note[field_name] = formatted_text
                    modified = True
        if modified:
            mw.col.update_note(note)
            editor.loadNote()
            showInfo("Note formatée avec succès !")
            if hasattr(mw, 'format_anki_notes_logger'):
                get_logger.info(f"Note {note.id} formatée avec succès.")
        else:
            showInfo("Aucune modification nécessaire.")
            if hasattr(mw, 'format_anki_notes_logger'):
                get_logger.debug("Aucune modification nécessaire pour cette note.")
    except Exception as e:
        showInfo(f"Erreur lors du formatage : {str(e)}")
        if hasattr(mw, 'format_anki_notes_logger'):
            get_logger.error(f"Erreur détaillée : {str(e)}", exc_info=True)
        else:
            print(f"[FormatAnkiNotes] Erreur détaillée : {str(e)}")

def add_format_button_to_editor(editor: Editor) -> None:
    """Ajoute un bouton 'Formater' à l'éditeur de notes, sans doublons."""
    for link in getattr(editor, '_links', []):
        if isinstance(link, dict) and link.get('cmd') == "format_note":
            if hasattr(mw, 'format_anki_notes_logger'):
                get_logger.debug("Bouton 'Formater' déjà présent dans l'éditeur.")
            return

    editor.addButton(
        icon=None,
        cmd="format_note",
        func=lambda e=editor: format_current_note(e),
        tip="Formater la note selon les règles typographiques françaises (n°, espaces insécables, etc.)",
        label="Formater",
        keys="Ctrl+Shift+F",
    )
    if hasattr(mw, 'format_anki_notes_logger'):
        get_logger.info("Bouton 'Formater' ajouté à l'éditeur.")

def format_selected_notes_in_browser(browser):
    logger = get_logger()
    logger.info("format_selected_notes_in_browser appelé !")

    try:
        if not hasattr(browser, 'selectedNotes'):
            logger.warning("browser.selectedNotes non disponible.")
            showInfo("Veuillez sélectionner des notes dans le navigateur.")
            return

        selected_notes = browser.selectedNotes()
        logger.info(f"Notes sélectionnées : {selected_notes}")

        if not selected_notes:
            showInfo("Aucune note sélectionnée.")
            return

        confirm = QMessageBox.question(
            browser,
            "Formater les notes",
            f"Voulez-vous vraiment formater {len(selected_notes)} notes ?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if confirm != QMessageBox.StandardButton.Yes:
            logger.info("Formatage annulé par l'utilisateur.")
            return

        count = 0
        for note_id in selected_notes:
            try:
                note = mw.col.get_note(note_id)
                logger.info(f"Traitement de la note {note_id} (champs : {note.keys()})")
                modified = False
                for field_name in note.keys():
                    original_html = note[field_name]
                    formatted_html = format_text(original_html)
                    if formatted_html != original_html:
                        note[field_name] = formatted_html
                        modified = True
                        logger.info(f"Champ '{field_name}' modifié.")
                if modified:
                    mw.col.update_note(note)
                    count += 1
                    logger.info(f"Note {note_id} formatée.")
            except Exception as e:
                logger.error(f"Erreur pour la note {note_id} : {e}", exc_info=True)

        showInfo(f"{count} notes formatées avec succès !")
        logger.info(f"{count} notes formatées avec succès.")

    except Exception as e:
        logger.error(f"Erreur inattendue : {e}", exc_info=True)
        showInfo(f"Erreur inattendue : {e}")




def add_format_menu_to_browser(browser):
    logger = get_logger()
    logger.info("Hook browser_will_show déclenché !")

    try:
        menu_notes = None
        for action in browser.menuBar().actions():
            if action.text() == "&Notes":
                menu_notes = action.menu()
                logger.info("Menu 'Notes' trouvé.")
                break

        if not menu_notes:
            logger.error("Menu 'Notes' introuvable dans le navigateur.")
            return

        # Vérifie si l'action existe déjà
        for existing_action in menu_notes.actions():
            if existing_action.text() == "Formater les notes sélectionnées":
                logger.info("L'action 'Formater les notes sélectionnées' existe déjà.")
                return

        # Fonction intermédiaire pour capturer le browser
        def on_format_selected_notes():
            logger.info("Callback 'on_format_selected_notes' appelé !")
            try:
                format_selected_notes_in_browser(browser)
            except Exception as e:
                logger.error(f"Erreur dans le callback : {e}", exc_info=True)
                showInfo(f"Erreur : {e}")

        # Crée l'action
        new_action = QAction("Formater les notes sélectionnées", mw)
        new_action.triggered.connect(on_format_selected_notes)
        menu_notes.addAction(new_action)
        logger.info("Action 'Formater les notes sélectionnées' ajoutée avec succès.")

    except Exception as e:
        logger.error(f"Erreur dans add_format_menu_to_browser : {e}", exc_info=True)



def initialize_addon():
    logger = get_logger()
    logger.info("Initialisation de l'add-on...")

    gui_hooks.editor_did_init.append(add_format_button_to_editor)
    gui_hooks.browser_will_show.append(add_format_menu_to_browser)
    logger.info("Hooks enregistrés.")




================================================
File: format_anki_notes/logger.py
================================================
import logging
import os
from aqt import mw

_LOGGER = None

def get_logger():
    global _LOGGER
    if _LOGGER is not None:
        return _LOGGER
    _LOGGER = logging.getLogger("FormatAnkiNotes")
    _LOGGER.setLevel(logging.DEBUG)
    try:
        if not hasattr(mw, 'pm') or mw.pm is None:
            print("[FormatAnkiNotes] Attention : mw.pm non disponible, logs dans la console.")
            handler = logging.StreamHandler()
        else:
            log_dir = os.path.join(mw.pm.profileFolder(), "addons", "format_anki_notes_logs")
            os.makedirs(log_dir, exist_ok=True)
            log_file = os.path.join(log_dir, "format_anki_notes.log")
            handler = logging.FileHandler(log_file)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        _LOGGER.addHandler(handler)
    except Exception as e:
        print(f"[FormatAnkiNotes] Erreur lors de la configuration du logger : {e}")
        _LOGGER = logging.getLogger("FormatAnkiNotes")
        _LOGGER.addHandler(logging.StreamHandler())
    return _LOGGER


================================================
File: format_anki_notes/main.py
================================================
# format_anki_notes/main.py
from .rules import (
    remove_all_nbsp,
    remove_multiple_spaces,
    normalize_units,
    format_sup_numbers,
    add_nbsp
)

def format_text(text):
    """
    Applique toutes les transformations typographiques dans l'ordre :
    1. Supprime les &nbsp; existants
    2. Supprime les espaces sécables multiples
    3. Normalise les unités
    4. Formate les numéros
    5. Ajoute les espaces insécables
    """
    text = remove_all_nbsp(text)
    text = remove_multiple_spaces(text)
    text = normalize_units(text)
    text = format_sup_numbers(text)
    text = add_nbsp(text)
    return text


================================================
File: format_anki_notes/rules/__init__.py
================================================
# format_anki_notes/rules/__init__.py
from .nbsps import remove_all_nbsp, add_nbsp
from .units import normalize_units
from .numbers import format_sup_numbers
from .multiple_spaces import remove_multiple_spaces

__all__ = [
    'remove_all_nbsp',
    'add_nbsp',
    'normalize_units',
    'format_sup_numbers',
    'remove_multiple_spaces'
]


================================================
File: format_anki_notes/rules/html.py
================================================
from bs4 import BeautifulSoup

def strip_html_tags(html):
    """Supprime toutes les balises HTML et retourne le texte brut."""
    soup = BeautifulSoup(html, "html.parser")
    return soup.get_text()

def escape_html(text):
    """Échappe les caractères spéciaux pour le HTML."""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def unescape_html(text):
    """Déséchappe les entités HTML (ex: &nbsp; → espace)."""
    return text.replace("&nbsp;", " ")


================================================
File: format_anki_notes/rules/multiple_spaces.py
================================================
# format_anki_notes/rules/multiple_spaces.py
import re

def remove_multiple_spaces(text):
    """
    Supprime les espaces sécables multiples dans le texte.
    Remplace deux ou plusieurs espaces consécutifs par un seul espace.
    Gère aussi les mélanges d'espaces normaux et d'espaces insécables (&nbsp;).

    Args:
        text (str): Le texte à nettoyer.

    Returns:
        str: Le texte avec les espaces multiples remplacés.
    """
    # Remplace les espaces insécables multiples
    text = re.sub(r'(&nbsp;\s*)+', ' ', text)
    # Remplace les espaces normaux multiples
    text = re.sub(r'[ \t]+', ' ', text)
    # Nettoie les espaces en début/fin de ligne
    text = text.strip()
    return text


================================================
File: format_anki_notes/rules/nbsps.py
================================================
import re

def remove_all_nbsp(text):
    """Supprime toutes les occurrences de &nbsp; dans le texte."""
    return text.replace('&nbsp;', ' ')

def add_nbsp(text):
    """
    Ajoute des espaces insécables selon les règles typographiques françaises.
    - Après les guillemets ouvrants («)
    - Avant les guillemets fermants »)
    - Avant les signes de ponctuation doubles (: ; ? !)
    - Autour des unités et symboles
    """
    # Espace insécable après les guillemets ouvrants
    text = re.sub(r'«\s+', '«&nbsp;', text)
    # Espace insécable avant les guillemets fermants
    text = re.sub(r'\s+»', '&nbsp;»', text)

    # On traite d'abord les cas spéciaux "?!" et "? !" en les marquant temporairement
    text = text.replace('?!', '___QUESTION_EXCLAMATION___')
    text = text.replace('? !', '___QUESTION_ESPACE_EXCLAMATION___')

    # Espace insécable avant les signes de ponctuation doubles
    text = re.sub(r'\s+\?', '&nbsp;?', text)
    text = re.sub(r'\s+!', '&nbsp;!', text)
    text = re.sub(r'\s+:', '&nbsp;:', text)
    text = re.sub(r'\s+;', '&nbsp;;', text)

    # On rétablit les cas spéciaux
    text = text.replace('___QUESTION_EXCLAMATION___', '?!')
    text = text.replace('___QUESTION_ESPACE_EXCLAMATION___', '? !')

    # Espace insécable après ± et =
    for sign in ['±', '=']:
        text = re.sub(rf'{re.escape(sign)}\s+', f'{sign}&nbsp;', text)

    # Espace insécable pour les mots clés suivis d'un chiffre
    keywords = r'article|coef\.|partie'
    text = re.sub(rf'\b({keywords})\s+(\d+)', r'\1&nbsp;\2', text, flags=re.IGNORECASE)

    # Espace insécable pour § suivi d'un chiffre
    text = re.sub(r'§\s*(\d+)', r'§&nbsp;\1', text)

    # Espace insécable pour les heures (ex: 2h, 2h30, 2h45min)
    text = re.sub(r'(\d+)\s*(h)(\d*)', r'\1&nbsp;\2\3', text)

    # Espace insécable entre un chiffre et une unité ou un symbole
    units = r'cm|km|m|g|kg|L|h|min|s|°C|%|€|\$'
    text = re.sub(rf'(\d)\s*({units})', r'\1&nbsp;\2', text, flags=re.IGNORECASE)

    # Espace insécable après n<sup>o</sup> suivi d'un chiffre
    text = re.sub(r'(n<sup>o<\/sup>)(\d+)', r'\1&nbsp;\2', text)

    # Espace insécable avant %
    text = re.sub(r'\s+%', '&nbsp;%', text)

    return text


================================================
File: format_anki_notes/rules/numbers.py
================================================
import re

import re

def format_sup_numbers(text):
    """
    Transforme les suffixes ordinaux en exposant :
    - 1er → 1<sup>er</sup>
    - 2e → 2<sup>e</sup>
    - 2d → 2<sup>d</sup>
    - 3e → 3<sup>e</sup>
    - n° → n<sup>o</sup>
    """
    # Gestion des suffixes ordinaux (1er, 2e, 2d, 3e, etc.)
    text = re.sub(r'(\d+)(er|e|d)\b', r'\1<sup>\2</sup>', text)
    # Gestion de n° → n<sup>o</sup>
    text = re.sub(r'n°', r'n<sup>o</sup>', text)
    return text


================================================
File: format_anki_notes/rules/units.py
================================================
import re

def normalize_unit(text, unit_name, variants):
    """
    Normalise une unité spécifique dans le texte.

    Args:
        text (str): Le texte à traiter.
        unit_name (str): Le nom normalisé de l'unité (ex: 'km').
        variants (list): Liste des variantes à remplacer (ex: ['KM', 'Km', 'kms', 'KMS']).
    Returns:
        str: Le texte avec l'unité normalisée.
    """
    pattern = r'\b(' + '|'.join(variants) + r')\b'
    return re.sub(pattern, unit_name, text, flags=re.IGNORECASE)

def normalize_km(text):
    """Normalise les variantes de 'km' en minuscules."""
    return normalize_unit(text, 'km', ['KM', 'Km', 'kms', 'KMS'])

def normalize_kg(text):
    """Normalise les variantes de 'kg' en minuscules."""
    return normalize_unit(text, 'kg', ['KG', 'Kg', 'kgs', 'KGS'])

def normalize_composite_units(text):
    """Normalise les unités composées (ex: km/h, kg/m³)."""
    composites = [
        (r'\b(KM|Km|kms|KMS)\/h\b', 'km/h'),
        (r'\b(KG|Kg|kgs|KGS)\/m3\b', 'kg/m³'),
    ]
    for pattern, replacement in composites:
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
    return text

def normalize_units(text):
    text = normalize_composite_units(text)
    text = normalize_km(text)
    text = normalize_kg(text)
    return text


================================================
File: tests/test_main.py
================================================
# tests/test_main.py
import pytest
from format_anki_notes.main import remove_all_nbsp, add_nbsp, format_sup_numbers, normalize_units, format_text

def test_remove_all_nbsp():
    assert remove_all_nbsp('Hello&nbsp;world!') == 'Hello world!'
    assert remove_all_nbsp('No&nbsp;nbsp&nbsp;here') == 'No nbsp here'
    assert remove_all_nbsp('Already normal') == 'Already normal'
    assert remove_all_nbsp('') == ''

def test_format_sup_numbers():
    assert format_sup_numbers('Voir n°4 et n°58.') == 'Voir n<sup>o</sup>4 et n<sup>o</sup>58.'
    assert format_sup_numbers('Aucun numéro ici.') == 'Aucun numéro ici.'
    assert format_sup_numbers('') == ''

def test_normalize_units():
    assert normalize_units('10 KM, 5 Km, 20 kms, 30 KMS') == '10 km, 5 km, 20 km, 30 km'
    assert normalize_units('Aucune unité ici.') == 'Aucune unité ici.'
    assert normalize_units('') == ''

def test_add_nbsp():
    assert add_nbsp('Ceci est un exemple de "texte" avec des points d\'interrogation ?') == 'Ceci est un exemple de "texte" avec des points d\'interrogation&nbsp;?'
    assert add_nbsp('Mais aussi des points d\'exclamation ainsi que : des deux-points.') == 'Mais aussi des points d\'exclamation ainsi que&nbsp;: des deux-points.'
    assert add_nbsp('Mais aussi, des « guillemets ».') == 'Mais aussi, des «&nbsp;guillemets&nbsp;».'
    assert add_nbsp('Mais aussi des signes plus ou moins ± 10.') == 'Mais aussi des signes plus ou moins ±&nbsp;10.'
    assert add_nbsp('Mais aussi des signes égal = 10.') == 'Mais aussi des signes égal =&nbsp;10.'
    assert add_nbsp('Mais aussi des pourcentages 10 %.') == 'Mais aussi des pourcentages 10&nbsp;%.'
    assert add_nbsp('Mais aussi des nombres 10 cm') == 'Mais aussi des nombres 10&nbsp;cm'
    assert add_nbsp('') == ''
    assert add_nbsp('Voir article 4 et Article 58.') == 'Voir article&nbsp;4 et Article&nbsp;58.'
    assert add_nbsp('Durée : 27h ou 2h.') == 'Durée&nbsp;: 27&nbsp;h ou 2&nbsp;h.'
    assert add_nbsp('10 cm et 20 KM.') == '10&nbsp;cm et 20&nbsp;KM.'
    assert add_nbsp('Voir n<sup>o</sup>5 et n<sup>o</sup>10.') == 'Voir n<sup>o</sup>&nbsp;5 et n<sup>o</sup>&nbsp;10.'

def test_format_text():
    # Cas avec unité en majuscule et numéro à formater
    text = 'Voir n°4 : 10 KM et article 5.'
    expected = 'Voir n<sup>o</sup>&nbsp;4&nbsp;: 10&nbsp;km et article&nbsp;5.'
    assert format_text(text) == expected

    # Cas avec guillemets et ponctuation
    text = '« Test » : 2h30 et 10% ?'
    expected = '«&nbsp;Test&nbsp;»&nbsp;: 2&nbsp;h30 et 10&nbsp;%&nbsp;?'
    assert format_text(text) == expected


================================================
File: tests/test_multiple_spaces.py
================================================
# tests/test_multiple_spaces.py
import pytest
from format_anki_notes.rules.multiple_spaces import remove_multiple_spaces

def test_remove_multiple_spaces():
    # Espaces normaux
    assert remove_multiple_spaces("Hello   world") == "Hello world"
    assert remove_multiple_spaces("  Hello   world  ") == "Hello world"
    # Mélange d'espaces normaux et &nbsp;
    assert remove_multiple_spaces("Hello&nbsp; &nbsp;world") == "Hello world"
    # Texte sans espaces multiples
    assert remove_multiple_spaces("Hello world") == "Hello world"
    # Texte vide
    assert remove_multiple_spaces("") == ""
    # Tabulations
    assert remove_multiple_spaces("Hello\t\tworld") == "Hello world"


================================================
File: tests/test_nbsps.py
================================================
# tests/test_nbsps.py
import pytest
from format_anki_notes.rules.nbsps import remove_all_nbsp, add_nbsp

def test_remove_all_nbsp():
    """Teste la suppression de toutes les occurrences de &nbsp; dans le texte."""
    # Cas de base
    assert remove_all_nbsp("Hello&nbsp;world!") == "Hello world!"
    # Plusieurs &nbsp;
    assert remove_all_nbsp("No&nbsp;&nbsp;&nbsp;nbsp&nbsp;here") == "No   nbsp here"
    # Aucun &nbsp;
    assert remove_all_nbsp("Already normal") == "Already normal"
    # Texte vide
    assert remove_all_nbsp("") == ""
    # &nbsp; en début/fin de chaîne
    assert remove_all_nbsp("&nbsp;Hello&nbsp;") == " Hello "
    # Mélange avec des espaces normaux
    assert remove_all_nbsp("Hello&nbsp; world&nbsp;!") == "Hello  world !"

def test_add_nbsp():
    """Teste l'ajout d'espaces insécables selon les règles typographiques françaises."""
    # Espace insécable après guillemet ouvrant
    assert add_nbsp('« Hello') == '«&nbsp;Hello'
    # Espace insécable avant guillemet fermant
    assert add_nbsp('Hello »') == 'Hello&nbsp;»'
    # Espace insécable avant ponctuation double
    assert add_nbsp('Hello : world') == 'Hello&nbsp;: world'
    assert add_nbsp('Hello ; world') == 'Hello&nbsp;; world'
    assert add_nbsp('Hello ?') == 'Hello&nbsp;?'
    assert add_nbsp('Hello !') == 'Hello&nbsp;!'
    # Cas spéciaux "?!" et "? !" (doivent rester inchangés)
    assert add_nbsp('Hello?!') == 'Hello?!'
    assert add_nbsp('Hello? !') == 'Hello? !'
    # Espace insécable après ± et =
    assert add_nbsp('± 10') == '±&nbsp;10'
    assert add_nbsp('= 5') == '=&nbsp;5'
    # Espace insécable pour mots-clés suivis d'un chiffre
    assert add_nbsp('article 4') == 'article&nbsp;4'
    assert add_nbsp('Article 58') == 'Article&nbsp;58'
    assert add_nbsp('coef. 3') == 'coef.&nbsp;3'
    assert add_nbsp('partie 2') == 'partie&nbsp;2'
    # Espace insécable pour § suivi d'un chiffre
    assert add_nbsp('§ 5') == '§&nbsp;5'
    # Espace insécable pour les heures
    assert add_nbsp('2h 30') == '2&nbsp;h 30'
    assert add_nbsp('2h') == '2&nbsp;h'
    # Espace insécable entre chiffre et unité/symbole
    assert add_nbsp('10 cm') == '10&nbsp;cm'
    assert add_nbsp('20 km') == '20&nbsp;km'
    assert add_nbsp('5 kg') == '5&nbsp;kg'
    assert add_nbsp('30 °C') == '30&nbsp;°C'
    assert add_nbsp('100 %') == '100&nbsp;%'
    assert add_nbsp('50 €') == '50&nbsp;€'
    assert add_nbsp('10 $') == '10&nbsp;$'
    # Espace insécable après n<sup>o</sup> suivi d'un chiffre
    assert add_nbsp('n<sup>o</sup>5') == 'n<sup>o</sup>&nbsp;5'
    # Espace insécable avant %
    assert add_nbsp('100 %') == '100&nbsp;%'
    # Cas avec plusieurs règles combinées
    assert add_nbsp('« Test » : 2h30 et 10% ?') == '«&nbsp;Test&nbsp;»&nbsp;: 2&nbsp;h30 et 10&nbsp;%&nbsp;?'
    # Texte sans modification nécessaire
    assert add_nbsp('Hello world') == 'Hello world'
    # Texte vide
    assert add_nbsp('') == ''
    # Cas avec HTML (à tester après intégration avec format_html)
    assert add_nbsp('Voir <b>article 4</b>') == 'Voir <b>article&nbsp;4</b>'
    # Cas avec guillemets et ponctuation
    assert add_nbsp('« Test » : 2h30 et 10% ?') == '«&nbsp;Test&nbsp;»&nbsp;: 2&nbsp;h30 et 10&nbsp;%&nbsp;?'


================================================
File: tests/test_numbers.py
================================================
from format_anki_notes.rules.numbers import format_sup_numbers

def test_format_sup_numbers():
    assert format_sup_numbers('1er') == '1<sup>er</sup>'
    assert format_sup_numbers('2e') == '2<sup>e</sup>'
    assert format_sup_numbers('2d') == '2<sup>d</sup>'
    assert format_sup_numbers('3e') == '3<sup>e</sup>'
    assert format_sup_numbers('10e') == '10<sup>e</sup>'
    assert format_sup_numbers('21e') == '21<sup>e</sup>'
    assert format_sup_numbers('n°4') == 'n<sup>o</sup>4'
    assert format_sup_numbers('Aucun numéro ici.') == 'Aucun numéro ici.'
    assert format_sup_numbers('') == ''


================================================
File: tests/test_units.py
================================================
from format_anki_notes.rules.units import normalize_kg, normalize_km, normalize_composite_units

# tests/test_units.py
def test_normalize_km():
    assert normalize_km('10 KM') == '10 km'
    assert normalize_km('5 Km et 20 kms') == '5 km et 20 km'

def test_normalize_kg():
    assert normalize_kg('5 KG') == '5 kg'
    assert normalize_kg('100 KGS') == '100 kg'

def test_normalize_composite_units():
    assert normalize_composite_units('100 KM/H') == '100 km/h'
    assert normalize_composite_units('50 KG/M3') == '50 kg/m³'


